;#########################################################
;##		AI version 3.0
;########################



;#######################################################################
;##	AI_case		divides strategy, amount differs per option
;##			
			
AI_case	
			dc #$00			; init case at 0

			
;#####################################################################	
;## AI_moveMem	stores the previous direction of player1
;##	

AI_moveMem
			dc #$00			; init moveMem at 0

;###########################################################################
;##	AI_tablePoint
;##

AI_tablePoint
			dc #$00			; init tablePoint at 0
			dc #$00
	


;##########################################################################
;##	main subroutine
;##

snake_AI_3			
AI_main
			JMP AI_decide	
		
AI3_end		LDA PLAYER1_DIR		; get direction of player 1
			STA AI_moveMem		; store direction for next turn
			JMP skip_AI			; return after choice is made
		

			
;#######################################################################################
;## AI_decide	decide where to go 
;##

AI_decide
			LDA AI_case			; get current case
			ASL 	
			TAX
			
			LDA Opt5Table,X
			STA $7000
			LDA Opt5Table+1,X
			STA $7001
			
			JMP ($7000)
			DC $00
			
Opt5Table
			;## case 0: players are heading right in to each other
			DC #<Opt5_0	
			DC #>Opt5_0
			
			;## case 1: players chose new direction, lines are connected
			DC #<Opt5_1	
			DC #>Opt5_1	
			
			;## case 2: player1 chose new direction, lines are not connected, player 2 still going left
			DC #<Opt5_2	
			DC #>Opt5_2
			
			;## case 3: player1 chose new direction, lines are not connected, player 2 follows
			DC #<Opt5_3
			DC #>Opt5_3
			
			;## case 4: players are separated , so player 2 only needs to fill up his space.
			dc #<Opt5_4
			dc #>Opt5_4
			
Opt5_0			
			LDA PLAYER2_X		; load player 2 x coordinate
			CLC
			SBC PLAYER1_X 		; check how far players are appart
			CMP #$03			
			BPL Opt5_Action3	; If distance >= 03 continue case 0		
			CMP #$01			
			BEQ Opt5_Action2	; If distance == 1, go to action 2
Opt5_Action1					; else do action 1
			LDA PLAYER1_DIR		; peek what player 1 does
			CMP #$03
			BEQ UpDown			; If player 1 doesn't go right, stay on course
			JMP AI3_end
			
UpDown	
			LDY PLAYER2_Y		; load y coordinate
			CPY #$0B			; check at which half player 2 is at.
			BPL	goUp			; if player 2 is at lower half, go up
goDown		LDA #$02			; else go down
			STA PLAYER2_DIR		; 
			JMP setCase1		; and jump to set case 1
goUp		LDA #$00			; set direction to up
			STA PLAYER2_DIR
			JMP setCase1		; and jump to set case 1
setCase1	LDA #$01			; set case to 1	 
			STA AI_case			
			JMP AI3_end			; and jump to end
	
Opt5_Action2
			LDA AI_moveMem		; get previous direction of player 1
			CMP #$03			; check if player1 was moving right
			BEQ UpDown			; if so, go check for going up or down
			LDY PLAYER2_Y		; load y coordinate
			CPY #$0B			; check at which half player 2 is at.
			BPL	goUp			; if player 2 is at lower half, go up
			JMP goDown			; else go down
		
Opt5_Action3	
			LDA PLAYER1_DIR		; peek what player 1 does
			CMP #$03			; if player 1 goes right, do nothing
			BNE Opt5_Action3_noend
			JMP AI3_end
Opt5_Action3_noend
			LDY PLAYER2_Y		; Else check position
			CPY #$0B			; 
			BPL	checkOpp		; if on lower half check if opponent goes up
			CMP #$02			; else check if opponent goes down
			BNE setCase2		; if not don't change direction, and set case 2
			LDA #$02			; else change direction 
			STA PLAYER2_DIR		
			JMP setCase3		; and set case 3
checkOpp	CMP #$00			; check if opponent goes up
			BNE setCase2		; if not don't change direction, and set case 2
			LDA #$00			; else change direction 
			STA PLAYER2_DIR		
			JMP setCase3		; and set case 3
setCase2	
			LDA #$02			; set case to 2	 
			STA AI_case			
			JMP AI3_end			; and jump to end
setCase3	
			LDA #$03			; set case to 3	 
			STA AI_case			
			JMP AI3_end			; and jump to end
setCase4	
			LDA #$04			; set case to 4
			STA AI_case
			JMP AI3_end			; and jumpt to end

Opt5_1
			LDA PLAYER2_DIR		; load previous direction of player 2
			CMP #$02			; if direction was down 
			BEQ below			; go to action for below, else for above
			
above		LDY PLAYER2_Y		; load player 2 y posiyion
			CPY #$01			; check if at top
			BEQ	right_fill		; if at top go set dir to right and fill up mode		
			CPY PLAYER1_Y		; else compare with position of player 1
			BPL goUp			; if player 2 is below or next to player 1, go up
			JMP goUp
tryLeft		LDA #$01			; else set left direction
			STA PLAYER2_DIR		;
			JMP setCase4		; and set case to 4 (players now end in a tie, or seperated)
right_fill	LDA #$03			; load right direction
			STA PLAYER2_DIR		;
			LDA #$04			; load case 4
			STA AI_case			;
			JMP AI3_end			;
below		LDY PLAYER2_Y		; load player 2 y posiyion
			CPY #$22			; check if at bottom
			BEQ	right_fill		; if at bottom go set dir to right and fill up mode	
			LDY PLAYER1_Y		; else load position of player 1
			CPY PLAYER2_Y		; and compare with position of player 2
			BPL goDown2			; if player 1 is below or next to player 2, go down
			JMP tryLeft			; else try left
goDown2		JMP goDown			

Opt5_2		
			LDY PLAYER1_Y		; load y position player 1
			CPY PLAYER2_Y		; compare with player 2 y position
			BEQ setCase0		; if on same height again, continue as if case 0 
			DEC PLAYER2_X		; else move player virtual left
			JSR AI_check_collision	; check if this will cause collison
			INC PLAYER2_X		; undo virtual movement
			CMP #$00			; check if there was no collision
			BEQ goEnd			; if not jump to end without changing direction
			LDY PLAYER2_Y		; else load current position of player 2
			CPY #$0B			; check on wich half player 2 resides
			BMI goDown2			; if on upper half go down
			JMP goUp			; else goUp
			
goEnd		JMP AI3_end			; return 
			
			
setCase0 	LDA #$00			; load case 0
			STA AI_case
			JMP snake_AI_3		; and try again in case 0
			
Opt5_3	
			LDA PLAYER1_DIR		; peek at player1 direction
			CMP PLAYER2_DIR		; compare to player 2 last direction
			BNE noEnd			; if not equal continue
			LDY PLAYER2_Y		; else check if not running into top
			CPY #$01
			BNE jmp_end			; if not, return
			LDA #$01			; else go left (player 1 will crash into wall)
			STA PLAYER2_DIR
jmp_end		JMP AI3_end			; else jump to end.
noEnd 		LDX #$01			; player 2 goes left
			STX PLAYER2_DIR
			CMP #$03			; if player 1 goes right, set case 0
			BEQ setCase0
			JMP setCase4
			
Opt5_4		
			JMP snake_AI_2	    ; go to basic fill up routine 


			
			

			
			
			