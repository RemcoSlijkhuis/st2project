;#########################################################
;##		AI version 3.0
;########################

;########################################################################
;## AI_option	variable wich holds the strategy 
;##
;##	option 1 : player 2 starts on upper half, opponent starts lower
;##	option 2 : player 2 starts on lower half, opponent starts lower 
;## option 3 : player 2 starts on upper half, opponent starts higher 
;## option 4 : player 2 starts on lower half, opponent starts higher
;## option 5 : opponent starts at exact opposite position
;##

AI_option
	
			dc #$00			; init option at 0

;#######################################################################
;##	AI_fase		divides strategy, amount differs per option
;##			
			
AI_case	
			dc #$00			; init fase at 0
;#####################################################################	
;## AI_turn 	keeps track at which turn te game is.
;##	
AI_turn
			dc #$00			; init turn at 0

;##########################################################################
;##	main subroutine
;##
			
AI_main
			LDA AI_turn 		; load previous turn
			CMP #$00			; check for first turn
			BNE notFirst		; if not, skip choosOpt
			JSR	AI_chooseOpt	; else call chooseOpt
notfirst
			INC AI_turn			; increment to current turn
			LDA AI_option		; load option in accumulator
			CMP #$05			; if option is 5, go to decideOpt5
			BEQ AI_decideOpt5	
			LDA #$01			; if no legal option, give error 1
			JSR AI_error		
			JMP AI_basicDir		; and perform basic direction choice
AI_end			RTS					; return after choice is made
		
;################################################################################
;## AI_chooseOpt	decides wich strategy to use
;##

AI_chooseOpt
			LDX PLAYER2_Y		; get starting position player 2
			CPX PLAYER1_Y		; compare to starting position player 1
			BEQ setOp5			; if exact opposite, go set option 1
			BMI lowOp			; if opponent is higher go to highOp, else proceed to lowOp
lowOp		CPX #$0B			; check on which half player 2 starts
			BMI setOp2			; go to setOp2if player 2 is on lower half
setOp1		LDA #$01			; else set option 3
			STA AI_option	
			RTS
setOp2		LDA #$02			; set option 2
			STA AI_option
			RTS
highOp		CPX #$0B			; check on wich half player 2 starts
			BMI setOp4			; go to set option 4 if player 2 is on lower half
setOp3		LDA #$03			; set Option 3
			STA AI_option	
			RTS
setOp4		LDA #$04			; set option 4
			STA AI_option	
			RTS
setOp5		LDA #$05			; set option 5
			STA AI_option
			RTS
			
;#######################################################################################
;## AI_decideOpt5	decide where to go if option = 5
;##

AI_decideOpt5
			LDA AI_case			; get current case
			CMP #$00			; check if case is 0
			BEQ Opt5_0			; if so go to Opt5_0
			CMP #$01			; check if case is 1
			BEQ Opt5_1			; if so go to Opt5_1
			CMP #$02			; check if case is 2
			BEQ Opt5_2			; if so go to Opt5_2
			
Opt5_0		LDX PLAYER2_X		; load player 2 x coordinate
			CLC
			SBC PLAYER1_X 		; check how far players are appart
			CMP #$03			
			BPL Opt5_0_cont		; If distance >= 03 continue case 0		
			CMP #$01			
			BEQ Opt5_0_				; If distance == 1, change to fase 1 
			
			LDA PLAYER1_DIR		; peek what player 1 does
			CMP #$03			; if player 1 goes right, do nothing
			BEQ AI_end		 
			
			





;######################################################################################
;## AI_error
;##		

AI_error
			LDX #$48			; move to (72;5)
			LDY #$05
			DC $04				
			Print DEF_ERROR		; print error message
			STA $7000			; store error code
			LDA #$00
			STA $7001
			Print $7000			; print error code 
			RTS
			
			
			