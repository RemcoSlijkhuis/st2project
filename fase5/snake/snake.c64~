	processor 6502
	org $8000
	
	jmp main			; start with the program

	INCLUDE "macro.c64"		; loa the macros
	INCLUDE "vars.c64"		; load string definition
	INCLUDE "ai.c64"		; load AI 1.0
	INCLUDE "ai2.c64"		; load AI 2.0
	INCLUDE "ai3.c64"		; load AI 3.0
	INCLUDE "menu.c64"		; load main menu
	INCLUDE "image.c64"		; load snake image
	
;#####################################################################
;## main: the main program                                          ##
;#####################################################################
main
	JSR main_menu
	JSR randomize_game
	JSR clear_field
	JSR init_screen
	
game_loop
	DC $0B				; sleep 5ms (one tick)
	DC $05
	DC $03				; get key into accumulator

	CMP #$00			; see if any key has been pressed
	BEQ game_step			; if not, continue with the loop
	
	CMP #$51			; see if key was 'Q'
	BNE game_no_end1		; if not, don't quit
	JMP game_exit_now
game_no_end1
	
	CMP #$70			; check if the key was 'p'
	BNE nopause			; if not, don't pause the game
	LDA #$70			; check for the key p
	STA $0002			; and store this key in 00:02
	JSR pauser			; pause until p has been pressed again
nopause
	
	JSR handle_keys			; update directions based on keys
	
game_step
	INC FRAMETICK			; increase the frame ticker with one
	LDA FRAMETICK			; load the frame ticker into the accumulator
	CMP #$10			; check if more than 16 (0x10) ticks have passed since last game step
	BNE game_loop			; if not, continue with the loop
	
	LDA AI_LEVEL			; load the AI level into the accumulator
	BEQ skip_AI			; if the AI level is 0, there is no AI
	
	JMP (AI_LEVEL)			; otherwise, perform the snake AI_1
	
skip_AI
	
	Move_player PLAYER1		; move the players
	Move_player PLAYER2
	
	Show_player PLAYER1, #$31	; print new player positions
	Show_player PLAYER2, #$34
	
	Check_collision			; see if the game is at an end
	BEQ game_no_end2		; if not, don't stop
	JMP game_end			; otherwise, stop
game_no_end2	
	Field_set PLAYER1_X, PLAYER1_Y	; flag the new position of player 1
	Field_set PLAYER2_X, PLAYER2_Y	; flag the new position of player 2
	
	LDA #$00			; reset the frame ticker to 0
	STA FRAMETICK
	
	JMP game_loop			; end of the game loop, so take it from the top
	
game_end
	
	DC $0F				; set color to red text
	DC $31
	
	CMP #$03			; see if it was a tie
	BMI game_end_win		; if not, display winner
	
	LDX #$48			; move to (72;4)
	DC $04
	Print DEF_TIE
	
	JMP game_end_wait		; now wait for the Q key to be pressed

game_end_win
	LDY AI_LEVEL			; load the AI_LEVEL into the y register
	BEQ game_end_player_wins	; and if the AI level is 0 (human vs human), the winner is always a human
	CMP #$2				; see if the winner is player 2 (AI)
	BEQ game_end_AI_wins		; if so, print the right message
game_end_you_win
	LDX #$46			; move to (70;4)
	LDY #$04
	DC $04
	Print DEF_YOUWIN		; print you win
	JMP game_end_wait		; continue with waiting for Q
game_end_AI_wins
	LDX #$46			; move to (70;4)
	LDY #$04
	DC $04
	Print DEF_COMPUTER		; print computer (computer wins)
	JMP game_end_win_text		; continue with printing 'WINS'
game_end_player_wins
	LDX #$46			; move to (70;4)
	LDY #$04
	DC $04
	Print DEF_PLAYER		; print Player
	CLC				; clear carry flag for the addition
	ADC #$30			; convert the number to an ascii digit
	STA $7000			; store it at 70:00
	LDA #$00			; and store a null
	STA $7001			; at 70:01
	Print $7000			; then print this digit

game_end_win_text
	LDX #$48			; move to (72;5)
	LDY #$05
	DC $04
	Print DEF_WINS
game_end_wait
	
	LDA #$51			; check for the Q key, by storing it in the accumulator
	STA $0002			; and then in 00:02
	JSR pauser			; now pause until this key has been pressed
	
game_exit_now
	
	DC $db

;#####################################################################
;## handle_keys:                                                    ##
;## updates player directions based on pressed key                  ##
;## Player 1 keys: w,a,s,d, ie 0x77, 0x61, 0x73, 0x64               ##
;## Player 2 keys: arrows, ie 0x1B + 0x5B + [0x41,0x44,0x42,0x43]   ##
;#####################################################################
handle_keys
	Handle_IO_player PLAYER1_DIR, #$77, #$00		; if w is pressed, move player 1 up
	Handle_IO_player PLAYER1_DIR, #$61, #$01		; if a is pressed, move player 1 left
	Handle_IO_player PLAYER1_DIR, #$73, #$02		; if s is pressed, move player 1 down
	Handle_IO_player PLAYER1_DIR, #$64, #$03		; if d is pressed, move player 1 right
	
	LDY AI_LEVEL			; load the AI_LEVEL into the y register
	BNE handle_key_end		; and if the AI level is not 0 (human vs human), don't handle player 2 keys
	
	
	LDX IS_ARROW			; load the arrow start sign flag into x
	CPX #$2				; see if the arrow flag is ready (2)
	BNE handle_keys_no_arrows	; if no arrow key has been pressed, don't process for player 2
	Handle_IO_player PLAYER2_DIR, #$41, #$00		; if A is pressed, move player 2 up
	Handle_IO_player PLAYER2_DIR, #$44, #$01		; if D is pressed, move player 2 left
	Handle_IO_player PLAYER2_DIR, #$42, #$02		; if B is pressed, move player 2 down
	Handle_IO_player PLAYER2_DIR, #$43, #$03		; if C is pressed, move player 2 right
handle_keys_no_arrows
	
	LDX #$00			; new value for IS_ARROW flag is always 0
	CMP #$1B			; see if the arrow start sign has been set
	BNE handle_key_not_arrowst	; if it's not the arrow start sign, skip setting the flag
	LDX #$01			; if it is, set the flag to 1
	JMP handle_key_not_followup	; if the current key is the arrow start sign, it's not the followup sign
handle_key_not_arrowst
	LDY IS_ARROW			; see if the IS_ARROW flag is currently on
	CPY #$01			; see if the flag is currently 1
	BNE handle_key_not_followup	; if not, this can't be the followup flag, so skip setting the flag
	CMP #$5B			; see if the followup flag has been set
	BNE handle_key_not_followup	; if the followup ([) is not set, skip setting the flag
	LDX #$02			; otherwise, if the previous sign was the arrow start sign and this is the 
handle_key_not_followup
	STX IS_ARROW			; and store the flag
handle_key_end
	
	RTS

;#####################################################################
;## randomize_game: randomizes the player positions                 ##
;#####################################################################
randomize_game:
	DC $07				; get a random number that's not bigger than 21
	DC $15				; 
	LDA #$10
	STA PLAYER1_Y			; store it as player1 y
	INC PLAYER1_Y			; and increment it with 1 to start at y=1 at the highest
	DC $07				; get a random number that's not bigger than 21
	DC $15				; 
	
	LDA #$10
	STA PLAYER2_Y			; store it as player2 y
	INC PLAYER2_Y			; and increment it with 1 to start at y=1 at the highest
	RTS

;#####################################################################
;## clear_field:                                                    ##
;## clears game field                                               ##
;## 51:01 to 66:42, 0 = empty, 1 = not empty                        ##
;#####################################################################
clear_field:
	LDY #$01			; the counter for X in the Y register
	LDX #$51			; the counter for Y in the X register
	LDA #$00			
	STA $0000			; store the accumulator as the lower byte of the relative address
	STX $0001			; load the indirect address to be [field y]:00
	LDA #$00			; default value for field is 00
	
fill_loop
	DC $91				; STA with indirectY addressing mode
	DC $00				; and look at 00:00 and 00:01
	
	
	INY				; increment the X counter with one
	CPY #$43			; see if the x counter is too big
	BNE fill_loop			; if not, continue with the horizontal loop
	LDX $0001			; get the y counter into the X register
	CPX #$67			; if it's too big
	BEQ clear_end			; then, stop with the loop
	INC $0001			; otherwise, increment the Y counter with one
	LDY #$01			; and reset the X counter
	JMP fill_loop			; then repeat the horizontal loop for the next line
clear_end
	
	RTS

;#####################################################################
;## init_screen: initialises the game screen with a #-border        ##
;#####################################################################
init_screen
	Clear_screen
	
init_screen_xloop			; this loop prints horizontal lines
	PRINT DEF_BORDER		; print the border
	INX				; increment x with one
	CPX #$50			; print this 80 times
	BNE init_screen_xloop
	
	LDX #$00			; put the x back to 0
	
	CPY #$00			; see if the y is 0
	BNE init_screen_x_end		; if y was not 0, skip with horizontal lines
	
	LDY #$17			; set y to 23 (0x17)
	DC $04				; move the cursor to the new position (0;17)
	JMP init_screen_xloop		; draw a new horizontal line
	
init_screen_x_end	
	
	LDY #$01			; start the y position at 1
	DC $04				; move the cursor to this new position (0;1)
	
init_screen_yloop			; this loop prints vertical lines
	DC $04				; move the cursor
	Print DEF_BORDER		; print DEF_BORDER
	INY				; increment the y with one
	CPY #$17			; see if this is the last y (23, 0x17)
	BNE init_screen_yloop
	
	LDY #$01			; load the y with 1 again
	
	CPX #$00			; see if the x is 0
	BNE init_screen_y_end		; if it's not, we're done with vertical outer lines
	
	LDX #$4F			; load x with 79 (0x4F)
	
	JMP init_screen_yloop		; and print the right vertical line
	
init_screen_y_end
	
	CPX #$4F			; see if x is 79 (0x4F), for the right outer line
	BNE init_screen_end		; if not, we're done with all lines
	
	LDX #$43			; load x with 67 (0x43), for middle-right vertical line
	JMP init_screen_yloop
	
init_screen_end
	
	LDX #$47			; move to (71;1)
	LDY #$1
	DC $04
	Print DEF_SNAKE			; and print 'Snake'
	INY				; move to (70;2)
	LDX #$46			 
	DC $04
	Print DEF_SHOWDOWN		; and print 'Showdown'
	
	LDX #$46			; move to (70;21)
	LDY #$15
	DC $04
	Print DEF_QUIT			; and print the quit string
	
	LDY #$14			; move to (70;20)
	DC $04				
	Print DEF_PAUSE
	
	Show_player PLAYER1, #$31	; print new player positions
	Show_player PLAYER2, #$34
	
	Field_set PLAYER1_X, PLAYER1_Y	; flag the new position of player 1
	Field_set PLAYER2_X, PLAYER2_Y	; flag the new position of player 2
	
	RTS

;#####################################################################
;## pauser: pauses the program until any key has been pressed       ##
;#####################################################################
pauser
	DC $0B				; sleep for 1ms
	DC $01
	
	DC $03				; getkey
	
	CMP $0002			; compare the accumulator (last pressed key) to the value in 00:02
	BNE pauser			; if that key has not been pressed, go back to loop
	RTS

